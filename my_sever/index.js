const cors = require("cors");
const express = require("express");
// const dotenv = require('dotenv');
const mysql = require("mysql2/promise");
// dotenv.config();
const path = require("path"); // ‚úÖ D√≤ng n√†y l√† b·∫Øt bu·ªôc
const app = express();
const PORT = 3000;

app.use(
  cors({
    origin: ["http://localhost:5173"],
    methods: ["GET", "POST", "PUT", "DELETE"],
    allowedHeaders: ["Content-Type", "Authorization"],
  }),
);

app.use(express.json());

const db = mysql.createPool({
  host: "localhost",
  port: 3306,
  user: "root",
  password: "", // n·∫øu b·∫°n c√≥ m·∫≠t kh·∫©u th√¨ nh·∫≠p v√†o ƒë√¢y
  database: "hotelmanagement",
});

// ROUTES
app.get("/", (req, res) => {
  res.send("üöÄ API Backend ƒëang ch·∫°y!");
});

// Login
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use("/api", require("./router/loginRoute"));

// API: L·∫•y danh s√°ch ph√≤ng
app.get("/room", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM room");
    res.json(rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "L·ªói truy v·∫•n ph√≤ng" });
  }
});
// API: Ch·ªânh s·ª≠a th√¥ng tin ph√≤ng
app.put("/room/:roomid", async (req, res) => {
  const { roomid } = req.params;
  const { roomtype, price, status } = req.body;

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ th√¥ng tin c·∫ßn thi·∫øt trong body
  if (!roomtype || !price || !status) {
    return res
      .status(400)
      .json({ message: "Thi·∫øu th√¥ng tin ƒë·ªÉ ch·ªânh s·ª≠a ph√≤ng" });
  }

  try {
    // C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng trong c∆° s·ªü d·ªØ li·ªáu
    const [result] = await db.query(
      "UPDATE room SET RoomType = ?, Price = ?, Status = ? WHERE RoomID = ?",
      [roomtype, price, status, roomid],
    );

    // Ki·ªÉm tra xem c√≥ ph√≤ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t kh√¥ng
    if (result.affectedRows === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ ch·ªânh s·ª≠a" });
    }

    res.json({ message: "Ch·ªânh s·ª≠a ph√≤ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói khi ch·ªânh s·ª≠a ph√≤ng:", err);
    res.status(500).json({ message: "L·ªói server khi ch·ªânh s·ª≠a ph√≤ng" });
  }
});
// API: Thanh to√°n v√† l∆∞u th√¥ng tin thanh to√°n
app.post("/api/payment", async (req, res) => {
  const { reservationId, paymentMethod } = req.body;

  try {
    // L·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng + gi√° ph√≤ng
    const [reservation] = await db.promise().query(
      `
      SELECT r.CheckInDate, r.CheckOutDate, rm.Price
      FROM reservation r
      JOIN room rm ON r.RoomID = rm.RoomID
      WHERE r.ReservationID = ?
    `,
      [reservationId],
    );

    if (reservation.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng" });
    }

    const { CheckInDate, CheckOutDate, Price } = reservation[0];

    // T√≠nh s·ªë ng√†y thu√™
    const start = new Date(CheckInDate);
    const end = new Date(CheckOutDate);
    const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
    const totalAmount = diffDays * Price;

    // L∆∞u v√†o b·∫£ng payment
    await db.promise().query(
      `
      INSERT INTO payment (ReservationID, Amount, PaymentMethod)
      VALUES (?, ?, ?)
    `,
      [reservationId, totalAmount, paymentMethod],
    );

    res
      .status(200)
      .json({ message: "Thanh to√°n th√†nh c√¥ng", amount: totalAmount });
  } catch (error) {
    console.error("Payment error:", error);
    res.status(500).json({ message: "L·ªói khi x·ª≠ l√Ω thanh to√°n" });
  }
});
app.get("/api/reservation/amount/:id", async (req, res) => {
  const reservationId = req.params.id;
  try {
    const [result] = await db.promise().query(
      `
      SELECT r.CheckInDate, r.CheckOutDate, rm.Price
      FROM reservation r
      JOIN room rm ON r.RoomID = rm.RoomID
      WHERE r.ReservationID = ?
    `,
      [reservationId],
    );

    if (result.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y" });
    }

    const { CheckInDate, CheckOutDate, Price } = result[0];
    const start = new Date(CheckInDate);
    const end = new Date(CheckOutDate);
    const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
    const amount = diffDays * Price;

    res.json({ amount });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi t√≠nh to√°n" });
  }
});
// L·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng theo RoomID
app.get("/reservation/:roomid", async (req, res) => {
  const { roomid } = req.params;
  try {
    const [rows] = await db.execute(
      "SELECT * FROM reservation WHERE RoomID = ? ORDER BY ReservationID DESC LIMIT 1",
      [roomid],
    );

    if (rows.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng" });
    }

    res.json(rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi truy v·∫•n reservation" });
  }
});
// Route thanh to√°n
// Route thanh to√°n
app.post("/payment", async (req, res) => {
  try {
    const { roomid, amount, paymentMethod } = req.body;

    // Ki·ªÉm tra n·∫øu th√¥ng tin thanh to√°n ƒë·∫ßy ƒë·ªß
    if (!roomid || !amount || !paymentMethod) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin thanh to√°n." });
    }

    // L·∫•y ReservationID t·ª´ RoomID
    const reservationQuery =
      "SELECT ReservationID FROM reservation WHERE RoomID = ?";
    const [reservationResult] = await db.execute(reservationQuery, [roomid]);

    if (reservationResult.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi RoomID n√†y." });
    }

    const reservationID = reservationResult[0].ReservationID;

    // L∆∞u th√¥ng tin thanh to√°n v√†o b·∫£ng payment
    const paymentQuery =
      "INSERT INTO payment (ReservationID, Amount, PaymentMethod) VALUES (?, ?, ?)";
    await db.execute(paymentQuery, [reservationID, amount, paymentMethod]);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng th√†nh "Available" (tr·ªëng) sau khi thanh to√°n th√†nh c√¥ng
    const updateRoomQuery =
      'UPDATE room SET Status = "Available" WHERE RoomID = ?';
    await db.execute(updateRoomQuery, [roomid]);

    // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    res.status(200).json({
      message: "Thanh to√°n th√†nh c√¥ng v√† ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh tr·ªëng.",
    });
  } catch (err) {
    console.error("L·ªói khi thanh to√°n:", err);
    res.status(500).json({ message: "L·ªói server khi thanh to√°n" });
  }
});

// API: ƒê·∫∑t ph√≤ng
app.post("/reservation", async (req, res) => {
  const { name, phone, customerid, roomid, checkindate, checkoutdate } =
    req.body;
  try {
    // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng
    const [rooms] = await db.query("SELECT Status FROM room WHERE RoomID = ?", [
      roomid,
    ]);
    if (!rooms.length)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    if (rooms[0].Status !== "Available")
      return res.status(400).json({ message: "Ph√≤ng kh√¥ng c√≥ s·∫µn" });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng th√†nh "Occupied"
    await db.query("UPDATE room SET Status = ? WHERE RoomID = ?", [
      "Occupied",
      roomid,
    ]);

    // Th√™m th√¥ng tin ƒë·∫∑t ph√≤ng v√†o b·∫£ng reservation
    const [result] = await db.query(
      "INSERT INTO reservation (CustomerName, CustomerPhone, CustomerID, RoomID, CheckInDate, CheckOutDate, Status) VALUES (?, ?, ?, ?, ?, ?, ?)",
      [name, phone, customerid, roomid, checkindate, checkoutdate, "Confirmed"],
    );

    res.json({
      message: "ƒê·∫∑t ph√≤ng th√†nh c√¥ng",
      reservationId: result.insertId,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server khi ƒë·∫∑t ph√≤ng" });
  }
});

// API: H·ªßy ƒë·∫∑t ph√≤ng
app.put("/room/:roomid/cancel", async (req, res) => {
  const { roomid } = req.params;
  try {
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng th√†nh "Available"
    const [roomResult] = await db.query(
      'UPDATE room SET Status = "Available" WHERE RoomID = ?',
      [roomid],
    );
    if (roomResult.affectedRows === 0)
      return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng th√†nh "Cancelled"
    await db.query(
      'UPDATE reservation SET Status = "Cancelled" WHERE RoomID = ? AND Status = "Confirmed"',
      [roomid],
    );

    res.json({ message: "H·ªßy ƒë·∫∑t ph√≤ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói khi h·ªßy ƒë·∫∑t ph√≤ng:", err);
    res.status(500).json({ error: "L·ªói khi h·ªßy ƒë·∫∑t ph√≤ng" });
  }
});

//ƒê·∫∑t ph√≤ng
app.post("/reservations", async (req, res) => {
  const { roomid, checkin, checkout, name, phone } = req.body;

  if (!roomid || !checkin || !checkout || !name || !phone) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ƒë·∫∑t ph√≤ng" });
  }

  try {
    const [rooms] = await db.query("SELECT Status FROM room WHERE RoomID = ?", [
      roomid,
    ]);

    if (!rooms.length) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    }

    if (rooms[0].Status !== "Available") {
      return res.status(400).json({ message: "Ph√≤ng kh√¥ng c√≥ s·∫µn" });
    }

    await db.query('UPDATE room SET Status = "Occupied" WHERE RoomID = ?', [
      roomid,
    ]);

    const [result] = await db.query(
      "INSERT INTO reservation (CustomerName, CustomerPhone, RoomID, CheckInDate, CheckOutDate, Status) VALUES (?, ?, ?, ?, ?, ?)",
      [name, phone, roomid, checkin, checkout, "Confirmed"],
    );

    res.status(200).json({
      message: "ƒê·∫∑t ph√≤ng th√†nh c√¥ng",
      reservationId: result.insertId,
    });
  } catch (err) {
    console.error("L·ªói khi ƒë·∫∑t ph√≤ng:", err);
    res.status(500).json({ message: "L·ªói server khi ƒë·∫∑t ph√≤ng" });
  }
});

//
app.get("/customers", async (req, res) => {
  try {
    const [customers] = await db.query(`
      SELECT 
        r.CustomerName, 
        r.CustomerPhone, 
        r.CheckInDate, 
        r.CheckOutDate, 
        rm.RoomType, 
        r.Status
      FROM reservation r
      JOIN room rm ON r.RoomID = rm.RoomID
    `);
    res.json(customers);
  } catch (err) {
    console.error("Error fetching customers:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng" });
  }
});
// Ph·ª•c v·ª• ·∫£nh tƒ©nh
app.use("/images", express.static(path.join(__dirname, "public/images")));

// Qu·∫£n l√Ω quy·ªÅn
app.use("/api/role", require("./router/roleRoute"));

// Qu·∫£n l√Ω staff
app.use("/api/staff", require("./router/userRoute"));

// 4. Qu·∫£n l√Ω nh√¢n vi√™n
app.get("/staff", async (req, res) => {
  try {
    const [results] = await db.query("SELECT * FROM staff");
    res.json(results);
  } catch (err) {
    res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch nh√¢n vi√™n" });
  }
});
app.post("/staff", async (req, res) => {
  const { name, phone, email, position } = req.body;
  try {
    const { roomid, name, phone, checkin, checkout } = req.body;

    await db.query(
      "INSERT INTO booking (roomid, name, phone, checkin, checkout) VALUES (?, ?, ?, ?, ?)",
      [roomid, name, phone, checkin, checkout],
    );
  } catch (err) {
    res.status(500).json({ error: "L·ªói th√™m nh√¢n vi√™n" });
  }
});
// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
